from ultralytics import YOLO
import cv2
import numpy as np
from ultralytics.utils.plotting import Annotator

# Load YOLO model
model = YOLO("best.pt")

# Load an image and resize it
img_path = r"D:\Tuğba Hoca Domates Arşiv\train\images\IMG_0984.jpg"
image = cv2.imread(img_path)
image = cv2.resize(image, (640, 640))  # Resize image to 640x640

# Predict objects in the image
results = model.predict(image)

# Initialize an Annotator for the image
annotator = Annotator(image, line_width=2, font_size=2)

# Iterate through each detection in the results
for result in results:
    xyxy = result.boxes.xyxy  # Each row in xyxy is [x1, y1, x2, y2]
    classes = result.boxes.cls  # Class IDs for each detection
    confidences = result.boxes.conf  # Confidence scores for each detection
    segments = result.masks.xy  # List of segments in pixel coordinates

    # Draw each segment as a polygon and calculate ellipse parameters
    for segment in segments:
        pts = np.array(segment, np.int32)
        pts = pts.reshape((-1, 1, 2))
        cv2.polylines(image, [pts], isClosed=True, color=(0, 255, 0), thickness=2)

        # Fit an ellipse to the segment if it has enough points
        if len(pts) >= 5:
            ellipse = cv2.fitEllipse(pts)
            center, axes, angle = ellipse
            major_axis_length = max(axes) / 2  # Halved because cv2 returns full length
            minor_axis_length = min(axes) / 2  # Halved because cv2 returns full length

            # Draw ellipse for visualization
            cv2.ellipse(image, ellipse, (0, 0, 0), 2)

            # Display axis lengths on the image
            text = f'Maj: {major_axis_length:.2f}, Min: {minor_axis_length:.2f}'
            text_position = (int(center[0]), int(center[1]))
            cv2.putText(image, text, text_position, cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1, cv2.LINE_AA)
        
    # Iterate over each box to draw it
    # for i, box in enumerate(xyxy):
    #     x1, y1, x2, y2 = map(int, box)
    #     cls = int(classes[i])
    #     conf = confidences[i]
    #     label = f'{model.names[cls]} {conf:.2f}'
    #     annotator.box_label([x1, y1, x2, y2], label, color=(255, 0, 0))

# Get the annotated image and display it
annotated_img = annotator.result()
cv2.imshow('YOLO V8 Detection', annotated_img)
cv2.waitKey(0)  # Wait for a key press to close the window
cv2.destroyAllWindows()
